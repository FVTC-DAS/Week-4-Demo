/*===============================================================
   SCD DEMO (SQL Server) â€” Type 1 overwrite, then Type 2 history
   Author: <Your Name>
   Safe to re-run: YES (drops/reseeds objects each run)
================================================================*/

-------------------------------------------------------------------------------
-- [0] Setup: schema + constants
-------------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE name = 'scd')
    EXEC('CREATE SCHEMA scd;');
GO

-------------------------------------------------------------------------------
-- [1] OLTP SOURCE: create + seed initial snapshot (as of 2010-01-15)
-------------------------------------------------------------------------------
PRINT '=== [1] Build OLTP source and seed initial customers ===';
DROP TABLE IF EXISTS scd.Customers_OLTP;
CREATE TABLE scd.Customers_OLTP
(
    CustomerID   INT           NOT NULL PRIMARY KEY,   -- natural/source key (NK)
    CustomerName VARCHAR(100)  NOT NULL,
    City         VARCHAR(60)   NOT NULL,
    State        CHAR(2)       NOT NULL,
    Zip          CHAR(5)       NOT NULL,
    UpdatedAt    DATE          NOT NULL
);

INSERT INTO scd.Customers_OLTP (CustomerID, CustomerName, City, State, Zip, UpdatedAt)
VALUES
(1001, 'Jane Smith', 'Appleton',  'WI', '54911', '2010-01-15'),
(1002, 'Mark Lee',   'Oshkosh',   'WI', '54901', '2010-01-15'),
(1003, 'Ana Gomez',  'Green Bay', 'WI', '54301', '2010-01-15');

SELECT * FROM scd.Customers_OLTP ORDER BY CustomerID;

-------------------------------------------------------------------------------
-- [2] DIMENSIONS: create Type 1 and Type 2
-------------------------------------------------------------------------------
PRINT '=== [2] Create DimCustomer_T1 (overwrite) and DimCustomer_T2 (history) ===';
DROP TABLE IF EXISTS scd.DimCustomer_T1;
CREATE TABLE scd.DimCustomer_T1
(
    CustomerSK   INT IDENTITY(1,1) PRIMARY KEY,
    CustomerNK   INT          NOT NULL UNIQUE,  -- NK from source
    CustomerName VARCHAR(100) NOT NULL,
    City         VARCHAR(60)  NOT NULL,
    State        CHAR(2)      NOT NULL,
    Zip          CHAR(5)      NOT NULL
);

DROP TABLE IF EXISTS scd.DimCustomer_T2;
CREATE TABLE scd.DimCustomer_T2
(
    CustomerSK       INT IDENTITY(1,1) PRIMARY KEY,   -- surrogate key (SK)
    CustomerNK       INT           NOT NULL,           -- natural key
    CustomerName     VARCHAR(100)  NOT NULL,
    City             VARCHAR(60)   NOT NULL,
    State            CHAR(2)       NOT NULL,
    Zip              CHAR(5)       NOT NULL,
    RowEffectiveDate DATE          NOT NULL,
    RowEndDate       DATE          NOT NULL,           -- '9999-12-31' = open-ended
    IsCurrent        BIT           NOT NULL,
    CONSTRAINT UX_DimCustomer_T2_Current UNIQUE (CustomerNK, IsCurrent)
        -- ensures max one current row per NK
);

-------------------------------------------------------------------------------
-- [3] INITIAL LOAD: populate both dimensions from OLTP
-------------------------------------------------------------------------------
PRINT '=== [3] Initial load into T1 and T2 (as of 2010-01-15) ===';
TRUNCATE TABLE scd.DimCustomer_T1;
INSERT INTO scd.DimCustomer_T1 (CustomerNK, CustomerName, City, State, Zip)
SELECT CustomerID, CustomerName, City, State, Zip
FROM scd.Customers_OLTP;

TRUNCATE TABLE scd.DimCustomer_T2;
INSERT INTO scd.DimCustomer_T2
    (CustomerNK, CustomerName, City, State, Zip, RowEffectiveDate, RowEndDate, IsCurrent)
SELECT
    CustomerID, CustomerName, City, State, Zip,
    CAST('2010-01-15' AS DATE), CAST('9999-12-31' AS DATE), 1
FROM scd.Customers_OLTP;

PRINT '>>> Check: Initial snapshot (one row per customer)';
SELECT * FROM scd.DimCustomer_T1 ORDER BY CustomerNK;
SELECT * FROM scd.DimCustomer_T2 ORDER BY CustomerNK, RowEffectiveDate;

-------------------------------------------------------------------------------
-- [4] SIMULATE SOURCE CHANGES over time (apply to OLTP)
-------------------------------------------------------------------------------
PRINT '=== [4] Apply staged changes to OLTP (2012..2023) ===';
-- 2012-06-15: Jane Smith -> Jane Jones
UPDATE scd.Customers_OLTP
  SET CustomerName = 'Jane Jones', UpdatedAt = '2012-06-15'
WHERE CustomerID = 1001;

-- 2015-09-01: Jane moves to Neenah, WI 54956
UPDATE scd.Customers_OLTP
  SET City = 'Neenah', State = 'WI', Zip = '54956', UpdatedAt = '2015-09-01'
WHERE CustomerID = 1001;

-- 2018-04-10: Jane Jones -> Jane Smith
UPDATE scd.Customers_OLTP
  SET CustomerName = 'Jane Smith', UpdatedAt = '2018-04-10'
WHERE CustomerID = 1001;

-- 2021-11-05: Jane Smith -> Jane Smith-Parker
UPDATE scd.Customers_OLTP
  SET CustomerName = 'Jane Smith-Parker', UpdatedAt = '2021-11-05'
WHERE CustomerID = 1001;

-- 2023-02-20: Jane Smith-Parker -> Lucy Smith
UPDATE scd.Customers_OLTP
  SET CustomerName = 'Lucy Smith', UpdatedAt = '2023-02-20'
WHERE CustomerID = 1001;

-- Other customers:
-- 2016-03-12: Mark Lee zip correction
UPDATE scd.Customers_OLTP
  SET Zip = '54902', UpdatedAt = '2016-03-12'
WHERE CustomerID = 1002;

-- 2017-08-23: Ana Gomez -> Ana M. Gomez
UPDATE scd.Customers_OLTP
  SET CustomerName = 'Ana M. Gomez', UpdatedAt = '2017-08-23'
WHERE CustomerID = 1003;

SELECT * FROM scd.Customers_OLTP ORDER BY CustomerID;

-------------------------------------------------------------------------------
-- [5] TYPE 1 SCD: overwrite dimension from current OLTP state
-------------------------------------------------------------------------------
PRINT '=== [5] SCD Type 1 (overwrite): upsert via INSERT+UPDATE ===';

-- Insert new NKs (none in this demo, but included)
INSERT INTO scd.DimCustomer_T1 (CustomerNK, CustomerName, City, State, Zip)
SELECT s.CustomerID, s.CustomerName, s.City, s.State, s.Zip
FROM scd.Customers_OLTP s
LEFT JOIN scd.DimCustomer_T1 d
  ON d.CustomerNK = s.CustomerID
WHERE d.CustomerNK IS NULL;

-- Update existing NKs (overwrite attributes)
UPDATE d
   SET d.CustomerName = s.CustomerName,
       d.City         = s.City,
       d.State        = s.State,
       d.Zip          = s.Zip
FROM scd.DimCustomer_T1 d
JOIN scd.Customers_OLTP s
  ON d.CustomerNK = s.CustomerID;

PRINT '>>> Check: T1 has latest values only (history lost)';
SELECT * FROM scd.DimCustomer_T1 ORDER BY CustomerNK;
-- Focus on NK=1001 to show only one row, latest values:
SELECT * FROM scd.DimCustomer_T1 WHERE CustomerNK = 1001;

-------------------------------------------------------------------------------
-- [6] RESET for SCD2 demo: restore OLTP to initial snapshot, reload T2 baseline
-------------------------------------------------------------------------------
PRINT '=== [6] Reset OLTP to initial snapshot and reload T2 baseline ===';

TRUNCATE TABLE scd.Customers_OLTP;
INSERT INTO scd.Customers_OLTP (CustomerID, CustomerName, City, State, Zip, UpdatedAt)
VALUES
(1001, 'Jane Smith', 'Appleton',  'WI', '54911', '2010-01-15'),
(1002, 'Mark Lee',   'Oshkosh',   'WI', '54901', '2010-01-15'),
(1003, 'Ana Gomez',  'Green Bay', 'WI', '54301', '2010-01-15');

TRUNCATE TABLE scd.DimCustomer_T2;
INSERT INTO scd.DimCustomer_T2
    (CustomerNK, CustomerName, City, State, Zip, RowEffectiveDate, RowEndDate, IsCurrent)
SELECT
    CustomerID, CustomerName, City, State, Zip,
    CAST('2010-01-15' AS DATE), CAST('9999-12-31' AS DATE), 1
FROM scd.Customers_OLTP;

-- Re-apply the same staged changes to OLTP (2012..2023)
UPDATE scd.Customers_OLTP
  SET CustomerName = 'Jane Jones', UpdatedAt = '2012-06-15'
WHERE CustomerID = 1001;

UPDATE scd.Customers_OLTP
  SET City = 'Neenah', State = 'WI', Zip = '54956', UpdatedAt = '2015-09-01'
WHERE CustomerID = 1001;

UPDATE scd.Customers_OLTP
  SET CustomerName = 'Jane Smith', UpdatedAt = '2018-04-10'
WHERE CustomerID = 1001;

UPDATE scd.Customers_OLTP
  SET CustomerName = 'Jane Smith-Parker', UpdatedAt = '2021-11-05'
WHERE CustomerID = 1001;

UPDATE scd.Customers_OLTP
  SET CustomerName = 'Lucy Smith', UpdatedAt = '2023-02-20'
WHERE CustomerID = 1001;

UPDATE scd.Customers_OLTP
  SET Zip = '54902', UpdatedAt = '2016-03-12'
WHERE CustomerID = 1002;

UPDATE scd.Customers_OLTP
  SET CustomerName = 'Ana M. Gomez', UpdatedAt = '2017-08-23'
WHERE CustomerID = 1003;

SELECT * FROM scd.Customers_OLTP ORDER BY CustomerID;

-------------------------------------------------------------------------------
-- [7] TYPE 2 SCD: close old version, insert new version
-------------------------------------------------------------------------------
PRINT '=== [7] SCD Type 2 (history): close-and-insert for changed rows ===';

;WITH CurrentDim AS
(
    SELECT *
    FROM scd.DimCustomer_T2
    WHERE IsCurrent = 1
),
Compare AS
(
    SELECT
        d.CustomerSK,
        d.CustomerNK,
        -- dim values
        d.CustomerName AS DimName,
        d.City         AS DimCity,
        d.State        AS DimState,
        d.Zip          AS DimZip,
        -- source (latest) values
        s.CustomerName AS SrcName,
        s.City         AS SrcCity,
        s.State        AS SrcState,
        s.Zip          AS SrcZip,
        s.UpdatedAt    AS ChangeDate,
        CASE WHEN (d.CustomerName <> s.CustomerName
               OR  d.City         <> s.City
               OR  d.State        <> s.State
               OR  d.Zip          <> s.Zip)
             THEN 1 ELSE 0 END AS IsChanged
    FROM CurrentDim d
    JOIN scd.Customers_OLTP s
      ON s.CustomerID = d.CustomerNK
)
SELECT *
INTO #ChangedRows
FROM Compare
WHERE IsChanged = 1;

-- Close out the old versions
UPDATE d
   SET d.RowEndDate = c.ChangeDate,
       d.IsCurrent  = 0
FROM scd.DimCustomer_T2 d
JOIN #ChangedRows c
  ON c.CustomerSK = d.CustomerSK
WHERE d.IsCurrent = 1;

-- Insert new versions
INSERT INTO scd.DimCustomer_T2
    (CustomerNK, CustomerName, City, State, Zip, RowEffectiveDate, RowEndDate, IsCurrent)
SELECT
    c.CustomerNK,
    c.SrcName, c.SrcCity, c.SrcState, c.SrcZip,
    c.ChangeDate,
    CAST('9999-12-31' AS DATE),
    1
FROM #ChangedRows c;

-- Handle brand-new NKs (not present in this demo but included)
INSERT INTO scd.DimCustomer_T2
    (CustomerNK, CustomerName, City, State, Zip, RowEffectiveDate, RowEndDate, IsCurrent)
SELECT
    s.CustomerID, s.CustomerName, s.City, s.State, s.Zip,
    s.UpdatedAt, CAST('9999-12-31' AS DATE), 1
FROM scd.Customers_OLTP s
LEFT JOIN scd.DimCustomer_T2 d
  ON d.CustomerNK = s.CustomerID AND d.IsCurrent = 1
WHERE d.CustomerNK IS NULL;

DROP TABLE IF EXISTS #ChangedRows;

PRINT '>>> Check: T2 now shows multiple versions per NK with dates';
SELECT
    CustomerNK, CustomerName, City, State, Zip,
    RowEffectiveDate, RowEndDate, IsCurrent
FROM scd.DimCustomer_T2
ORDER BY CustomerNK, RowEffectiveDate;

-- Focus on NK=1001 to read the story over time
SELECT
    CustomerNK, CustomerName, City, State, Zip,
    RowEffectiveDate, RowEndDate, IsCurrent
FROM scd.DimCustomer_T2
WHERE CustomerNK = 1001
ORDER BY RowEffectiveDate;

-------------------------------------------------------------------------------
-- [8] Extras: constraints & time-travel checks
-------------------------------------------------------------------------------
PRINT '=== [8] Extras: one-current-row check and as-of lookup ===';

-- Exactly one current row per NK
SELECT CustomerNK, COUNT(*) AS CurrentRows
FROM scd.DimCustomer_T2
WHERE IsCurrent = 1
GROUP BY CustomerNK;

-- As-of lookup (e.g., how did we know the customer looked on 2016-12-31?)
DECLARE @AsOf DATE = '2016-12-31';
SELECT CustomerNK, CustomerName, City, State, Zip
FROM scd.DimCustomer_T2
WHERE @AsOf >= RowEffectiveDate AND @AsOf < RowEndDate
ORDER BY CustomerNK;
